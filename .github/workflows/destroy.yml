name: destroy the infrastructure

on:
  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage'
        required: true
        default: 'dev'
        options:
          - dev
          - qa
          - prod


jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read  # <-- ENSURE THIS IS PRESENT
    steps:
      - name: Validate input
        run: |
          if [[ "${{ github.event.inputs.stage }}" != "dev" && "${{ github.event.inputs.stage }}" != "qa" && "${{ github.event.inputs.stage }}" != "prod" ]]; then
            echo "Invalid input: ${{ github.event.inputs.stage }}. Please use one of the following: dev, qa, prod."
            exit 1
          fi
          
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-output: json

      - name: Initialize Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.2.3'

      - name: Terraform Init and Workspace Management
        run: |
          terraform init
          terraform workspace select ${{ github.event.inputs.stage }} || terraform workspace new ${{ github.event.inputs.stage }}
        working-directory: ./terraform

      - name: Apply destroy configuration
        env:
          TF_VAR_github_token: ${{ secrets.GH_TOKEN }}
        run: |
          terraform init
          VAR_FILE="config/${{ github.event.inputs.stage }}.json"
          terraform destroy -var-file="$VAR_FILE" --auto-approve \
            -var "stage=${{ github.event.inputs.stage }}"
        working-directory: ./terraform

      - name: Fetch and Upload Workflow Logs to S3 on Failure
        if: failure() # This step runs ONLY if any previous step in this job fails
        run: |
          STAGE="${{ github.event.inputs.stage }}"
          WORKFLOW_NAME="${{ github.workflow }}"
          RUN_ID="${{ github.run_id }}"
          JOB_NAME="${{ github.job }}"
          
          # Get the S3 bucket name from Terraform output (passed as a workflow secret or var)
          # Assuming you've stored the Terraform output bucket name as a GitHub Secret, e.g., GITHUB_ACTIONS_LOG_BUCKET
          S3_LOG_BUCKET="${{ secrets.GIT_ACTIONS_LOG_BUCKET }}" 
          
          # 1. Fetch the entire workflow log bundle using GitHub API
          echo "Fetching logs for run ID: ${RUN_ID}"
          WORKFLOW_LOG_ZIP_URL="https://api.github.com/repos/${{ github.repository }}/actions/runs/${RUN_ID}/logs"
          
          curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" -L "${WORKFLOW_LOG_ZIP_URL}" -o workflow_logs.zip
          unzip -qq workflow_logs.zip -d workflow_logs

          # Combine all individual job logs into one file for easier upload/parsing
          # Name it uniquely for S3
          LOG_FILE_NAME="${WORKFLOW_NAME}_${STAGE}_${JOB_NAME}_${RUN_ID}_$(date +%Y%m%d%H%M%S).log"
          FULL_LOG_PATH="./workflow_logs/${LOG_FILE_NAME}"
          
          # Ensure a file is created even if unzip fails, to have something to upload
          find workflow_logs -type f -name "*.txt" -exec cat {} + > "${FULL_LOG_PATH}" || echo "No detailed logs found or error during log extraction." > "${FULL_LOG_PATH}"
          
          # 2. Upload the combined log file to S3
          S3_PATH="workflow_logs/year=$(date +%Y)/month=$(date +%m)/day=$(date +%d)/${LOG_FILE_NAME}"

          echo "Uploading logs to s3://${S3_LOG_BUCKET}/${S3_PATH}"
          aws s3 cp "${FULL_LOG_PATH}" "s3://${S3_LOG_BUCKET}/${S3_PATH}"
          echo "Logs uploaded to S3."

          # 3. Send SNS Notification (as before, but update message to reference S3/Athena)
          AWS_ACCOUNT_ID="${{ secrets.YOUR_AWS_ACCOUNT_ID }}"  # Replace or use secret
          AWS_REGION="us-east-1" # As defined in your configure-aws-credentials step
          
          MESSAGE_SUBJECT="GitHub Actions Workflow FAILED: ${WORKFLOW_NAME} - Stage: ${STAGE}"
          MESSAGE_BODY="Workflow '${WORKFLOW_NAME}' for stage '${STAGE}' failed.\n"
          MESSAGE_BODY+="Job: '${JOB_NAME}'\n"
          MESSAGE_BODY+="----------------------------------------------------------\n"
          MESSAGE_BODY+="Detailed logs available in S3 for Athena/Grafana querying:\n"
          MESSAGE_BODY+="S3 Path: s3://${S3_LOG_BUCKET}/${S3_PATH}\n\n"
          MESSAGE_BODY+="For direct access to the GitHub workflow run, visit:\n"
          MESSAGE_BODY+="${RUN_URL}/jobs/${JOB_NAME}\n\n"
          MESSAGE_BODY+="Full workflow run: ${RUN_URL}"

          aws sns publish \
            --topic-arn "arn:aws:sns:${AWS_REGION}:${AWS_ACCOUNT_ID}:app-alerts-topic-${STAGE}" \
            --subject "${MESSAGE_SUBJECT}" \
            --message "${MESSAGE_BODY}"
